"use strict";(self.webpackChunkthreejs_journey=self.webpackChunkthreejs_journey||[]).push([[3729,7245,8008,8668],{3729:(e,n,t)=>{t.r(n),t.d(n,{default:()=>d});var i=t(9477),o=t(9365),a=t(8668),r=t(7245),s=t(8243),u=t(8008);const d=class{constructor(e){let{element:n}=e;this.element=n,this.init()}init(){const e=document.querySelector("canvas#webgl"),n=(new i.dpR).load(u);n.colorSpace=i.KI_;const t=new s.ZP,d=new i.xsS,v=new i._12(1,2/3,64,64),l=v.attributes.position.count,c=new Float32Array(l);for(let e=0;e<l;e++)c[e]=Math.random();v.setAttribute("aRandom",new i.TlE(c,1));const m=new i.FIo({vertexShader:a,fragmentShader:r,side:i.ehD,uniforms:{uFrequency:{value:10},uTimeLapse:{value:0},uTexture:{value:n}}});t.add(m.uniforms.uFrequency,"value",0,50,.01);const w=new i.Kj0(v,m);w.scale.set(1.5,1.5,1.5),d.add(w);const h={width:window.innerWidth,height:window.innerHeight},p=new i.cPb(75,h.width/h.height,.1,100);p.position.z=2,d.add(p);const g=new o.z(p,e);g.enableDamping=!0;const f=new i.CP7({canvas:e});f.setSize(h.width,h.height),f.setPixelRatio(Math.min(window.devicePixelRatio,2)),f.outputColorSpace=i.GUF;const x=new i.SUY,y=()=>{const e=x.getElapsedTime();m.uniforms.uTimeLapse.value=e,g.update(),f.render(d,p),window.requestAnimationFrame(y)};y(),window.addEventListener("resize",(()=>{h.width=window.innerWidth,h.height=window.innerHeight,p.aspect=h.width/h.height,p.updateProjectionMatrix(),f.setSize(h.width,h.height),f.setPixelRatio(Math.min(window.devicePixelRatio,2))}))}destroy(){console.log("destroyed",this)}}},8008:(e,n,t)=>{e.exports=t.p+"e0e4a95fcbfdde29ee85..jpeg"},7245:e=>{e.exports="precision mediump float;\n\nuniform sampler2D uTexture;\n\nvarying float vRandom;\nvarying vec2 vUv;\nvarying float vElevation;\n\nvoid main()\n{\n    vec4 textureColor = texture2D(uTexture, vUv);\n    textureColor.rgba *= vElevation * 2.0 + 0.5;\n    gl_FragColor = textureColor;\n}"},8668:e=>{e.exports="uniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\n\nattribute vec3 position;\nattribute float aRandom;\nattribute vec2 uv;\n\nuniform float uFrequency;\nuniform float uTimeLapse;\n\nvarying vec2 vUv;\nvarying float vRandom;\nvarying float vElevation;\n\nvoid main()\n{\n    // position\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n    vElevation = sin(modelPosition.x * uFrequency + uTimeLapse * 5.0) * 0.1;\n    modelPosition.z += vElevation;\n\n    // camera\n    vec4 viewPosition = viewMatrix * modelPosition;\n\n    // clip space\n    vec4 projectPosition = projectionMatrix * viewPosition;\n    gl_Position = projectPosition;\n\n    // varying\n    vRandom = aRandom;\n    vUv = uv;\n}"}}]);