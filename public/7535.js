"use strict";(self.webpackChunkthreejs_journey=self.webpackChunkthreejs_journey||[]).push([[7535,2236,529],{7535:(e,n,o)=>{o.r(n),o.d(n,{default:()=>c});var i=o(9477),t=o(9365),a=o(2236),r=o(529),v=o(8243);const c=class{constructor(e){let{element:n}=e;this.element=n,this.init()}init(){const e=document.querySelector("canvas#webgl"),n=new i.xsS,o=new v.ZP,c={depthColor:"#247bae",surfaceColor:"#9bd8ff"},g=new i._12(2,2,128,128),l=new i.jyz({vertexShader:r,fragmentShader:a,uniforms:{uBigWavesElevation:{value:.2},uBigWavesFrequency:{value:new i.FM8(4,1.5)},uTime:{value:0},uBigWavesSpeed:{value:.75},uDepthColor:{value:new i.Ilk(c.depthColor)},uSurfaceColor:{value:new i.Ilk(c.surfaceColor)}},side:i.ehD});o.add(l.uniforms.uBigWavesElevation,"value").min(0).max(1).step(.001).name("uBigWavesElevation"),o.add(l.uniforms.uBigWavesFrequency.value,"x").min(0).max(10).step(.001).name("uBigWavesFrequencyX"),o.add(l.uniforms.uBigWavesFrequency.value,"y").min(0).max(10).step(.001).name("uBigWavesFrequencyY"),o.add(l.uniforms.uBigWavesSpeed,"value").min(0).max(4).step(.001).name("uBigWavesSpeed"),o.addColor(c,"depthColor").name("depthColor").onChange((e=>{l.uniforms.uDepthColor.value=new i.Ilk(c.depthColor)})),o.addColor(c,"surfaceColor").name("surfaceColor").onChange((e=>{console.log("change"),l.uniforms.uSurfaceColor.value=new i.Ilk(c.surfaceColor)}));const s=new i.Kj0(g,l);s.rotation.x=.5*-Math.PI,n.add(s);const u={width:window.innerWidth,height:window.innerHeight},d=new i.cPb(75,u.width/u.height,.1,100);d.position.z=2,d.position.y=1.5,n.add(d);const f=new t.z(d,e);f.enableDamping=!0;const x=new i.CP7({canvas:e});x.setSize(u.width,u.height),x.setPixelRatio(Math.min(window.devicePixelRatio,2)),x.outputColorSpace=i.GUF;const y=new i.SUY,m=()=>{const e=y.getElapsedTime();l.uniforms.uTime.value=e,f.update(),x.render(n,d),window.requestAnimationFrame(m)};m(),window.addEventListener("resize",(()=>{u.width=window.innerWidth,u.height=window.innerHeight,d.aspect=u.width/u.height,d.updateProjectionMatrix(),x.setSize(u.width,u.height),x.setPixelRatio(Math.min(window.devicePixelRatio,2))}))}destroy(){console.log("destroyed",this)}}},2236:e=>{e.exports="varying float vElevation;\n\nvarying vec3 vDepthColor;\nvarying vec3 vSurfaceColor;\n\nvoid main() {\n  vec3 color = vec3(.3);\n\n  color = mix(vDepthColor, vSurfaceColor, vElevation);\n\n  gl_FragColor = vec4(color, 1.0);\n  #include <colorspace_fragment>\n}"},529:e=>{e.exports="uniform float uBigWavesElevation;\nuniform float uTime;\n\nuniform vec2 uBigWavesFrequency;\nuniform float uBigWavesSpeed;\n\nuniform vec3 uDepthColor;\nuniform vec3 uSurfaceColor;\n\nvarying float vElevation;\n\nvarying vec3 vDepthColor;\nvarying vec3 vSurfaceColor;\n\n// Classic Perlin 3D Noise \n// by Stefan Gustavson\n//\nvec4 permute(vec4 x)\n{\n    return mod(((x*34.0)+1.0)*x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec3 fade(vec3 t)\n{\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec3 P)\n{\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}\n\nvoid main() {\n  vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n  // elevation\n  float elevation = sin(modelPosition.x * uBigWavesFrequency.x + uTime * uBigWavesSpeed)\n                  * sin(modelPosition.z * uBigWavesFrequency.y + uTime * uBigWavesSpeed)\n                  * uBigWavesElevation;\n\n  // adding perlin 3d noise\n  for(float i = 1.; i <= 3.; i++) {\n    elevation -= abs(cnoise(vec3(modelPosition.xz * 3. * i, uTime * .2)) * .15 / i );\n  }\n\n  // custom position\n  modelPosition.y = elevation;\n\n  vec4 viewPosition = viewMatrix * modelPosition;\n  vec4 projectedPosition = projectionMatrix * viewPosition;\n  gl_Position = projectedPosition;\n\n  vElevation = elevation; \n\n  vDepthColor = uDepthColor;\n  vSurfaceColor = uSurfaceColor;\n}"}}]);