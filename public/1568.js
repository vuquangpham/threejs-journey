"use strict";(self.webpackChunkthreejs_journey=self.webpackChunkthreejs_journey||[]).push([[1568],{1568:(e,t,r)=>{r.r(t),r.d(t,{default:()=>a});var o=r(9477),s=r(9365),n=r(3867),i=r(2854);const a=class{constructor(e){let{element:t}=e;this.element=t,this.init()}init(){o.epp.enabled=!1;const e=document.querySelector("canvas#webgl"),t=new o.xsS,r=new i._;r.setDecoderPath("/draco/");const a=new n.E;a.setDRACOLoader(r),a.load("/models/Hamburger/glTF-Binary/Hamburger.glb",(e=>{e.scene.scale.set(.25,.25,.25),t.add(e.scene)}));const d=new o.Kj0(new o._12(10,10),new o.Wid({color:"#444",metalness:0,roughness:.5}));d.receiveShadow=!0,d.rotation.x=.5*-Math.PI,t.add(d);const c=new o.Mig(16777215,.8);t.add(c);const h=new o.Ox3(16777215,.6);h.castShadow=!0,h.shadow.mapSize.set(1024,1024),h.shadow.camera.far=15,h.shadow.camera.left=-7,h.shadow.camera.top=7,h.shadow.camera.right=7,h.shadow.camera.bottom=-7,h.position.set(5,5,5),t.add(h);const l={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{l.width=window.innerWidth,l.height=window.innerHeight,u.aspect=l.width/l.height,u.updateProjectionMatrix(),f.setSize(l.width,l.height),f.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const u=new o.cPb(75,l.width/l.height,.1,100);u.position.set(2,2,2),t.add(u);const w=new s.z(u,e);w.target.set(0,.75,0),w.enableDamping=!0;const f=new o.CP7({canvas:e});f.outputColorSpace=o.GUF,f.shadowMap.enabled=!0,f.shadowMap.type=o.ntZ,f.setSize(l.width,l.height),f.setPixelRatio(Math.min(window.devicePixelRatio,2));const y=new o.SUY,p=()=>{y.getElapsedTime();w.update(),f.render(t,u),window.requestAnimationFrame(p)};p()}destroy(){console.log("destroyed",this)}}},2854:(e,t,r)=>{r.d(t,{_:()=>n});var o=r(9477);const s=new WeakMap;class n extends o.aNw{constructor(e){super(e),this.decoderPath="",this.decoderConfig={},this.decoderBinary=null,this.decoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.defaultAttributeIDs={position:"POSITION",normal:"NORMAL",color:"COLOR",uv:"TEX_COORD"},this.defaultAttributeTypes={position:"Float32Array",normal:"Float32Array",color:"Float32Array",uv:"Float32Array"}}setDecoderPath(e){return this.decoderPath=e,this}setDecoderConfig(e){return this.decoderConfig=e,this}setWorkerLimit(e){return this.workerLimit=e,this}load(e,t,r,s){const n=new o.hH6(this.manager);n.setPath(this.path),n.setResponseType("arraybuffer"),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials),n.load(e,(e=>{this.parse(e,t,s)}),r,s)}parse(e,t,r){this.decodeDracoFile(e,t,null,null,o.KI_).catch(r)}decodeDracoFile(e,t,r,s,n=o.GUF){const i={attributeIDs:r||this.defaultAttributeIDs,attributeTypes:s||this.defaultAttributeTypes,useUniqueIDs:!!r,vertexColorSpace:n};return this.decodeGeometry(e,i).then(t)}decodeGeometry(e,t){const r=JSON.stringify(t);if(s.has(e)){const t=s.get(e);if(t.key===r)return t.promise;if(0===e.byteLength)throw new Error("THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.")}let o;const n=this.workerNextTaskID++,i=e.byteLength,a=this._getWorker(n,i).then((r=>(o=r,new Promise(((r,s)=>{o._callbacks[n]={resolve:r,reject:s},o.postMessage({type:"decode",id:n,taskConfig:t,buffer:e},[e])}))))).then((e=>this._createGeometry(e.geometry)));return a.catch((()=>!0)).then((()=>{o&&n&&this._releaseTask(o,n)})),s.set(e,{key:r,promise:a}),a}_createGeometry(e){const t=new o.u9r;e.index&&t.setIndex(new o.TlE(e.index.array,1));for(let r=0;r<e.attributes.length;r++){const s=e.attributes[r],n=s.name,i=s.array,a=s.itemSize,d=new o.TlE(i,a);"color"===n&&(this._assignVertexColorSpace(d,s.vertexColorSpace),d.normalized=i instanceof Float32Array==!1),t.setAttribute(n,d)}return t}_assignVertexColorSpace(e,t){if(t!==o.KI_)return;const r=new o.Ilk;for(let t=0,o=e.count;t<o;t++)r.fromBufferAttribute(e,t).convertSRGBToLinear(),e.setXYZ(t,r.r,r.g,r.b)}_loadLibrary(e,t){const r=new o.hH6(this.manager);return r.setPath(this.decoderPath),r.setResponseType(t),r.setWithCredentials(this.withCredentials),new Promise(((t,o)=>{r.load(e,t,void 0,o)}))}preload(){return this._initDecoder(),this}_initDecoder(){if(this.decoderPending)return this.decoderPending;const e="object"!=typeof WebAssembly||"js"===this.decoderConfig.type,t=[];return e?t.push(this._loadLibrary("draco_decoder.js","text")):(t.push(this._loadLibrary("draco_wasm_wrapper.js","text")),t.push(this._loadLibrary("draco_decoder.wasm","arraybuffer"))),this.decoderPending=Promise.all(t).then((t=>{const r=t[0];e||(this.decoderConfig.wasmBinary=t[1]);const o=i.toString(),s=["/* draco decoder */",r,"","/* worker */",o.substring(o.indexOf("{")+1,o.lastIndexOf("}"))].join("\n");this.workerSourceURL=URL.createObjectURL(new Blob([s]))})),this.decoderPending}_getWorker(e,t){return this._initDecoder().then((()=>{if(this.workerPool.length<this.workerLimit){const e=new Worker(this.workerSourceURL);e._callbacks={},e._taskCosts={},e._taskLoad=0,e.postMessage({type:"init",decoderConfig:this.decoderConfig}),e.onmessage=function(t){const r=t.data;switch(r.type){case"decode":e._callbacks[r.id].resolve(r);break;case"error":e._callbacks[r.id].reject(r);break;default:console.error('THREE.DRACOLoader: Unexpected message, "'+r.type+'"')}},this.workerPool.push(e)}else this.workerPool.sort((function(e,t){return e._taskLoad>t._taskLoad?-1:1}));const r=this.workerPool[this.workerPool.length-1];return r._taskCosts[e]=t,r._taskLoad+=t,r}))}_releaseTask(e,t){e._taskLoad-=e._taskCosts[t],delete e._callbacks[t],delete e._taskCosts[t]}debug(){console.log("Task load: ",this.workerPool.map((e=>e._taskLoad)))}dispose(){for(let e=0;e<this.workerPool.length;++e)this.workerPool[e].terminate();return this.workerPool.length=0,""!==this.workerSourceURL&&URL.revokeObjectURL(this.workerSourceURL),this}}function i(){let e,t;function r(e,t,r,o,s,n){const i=n.num_components(),a=r.num_points()*i,d=a*s.BYTES_PER_ELEMENT,c=function(e,t){switch(t){case Float32Array:return e.DT_FLOAT32;case Int8Array:return e.DT_INT8;case Int16Array:return e.DT_INT16;case Int32Array:return e.DT_INT32;case Uint8Array:return e.DT_UINT8;case Uint16Array:return e.DT_UINT16;case Uint32Array:return e.DT_UINT32}}(e,s),h=e._malloc(d);t.GetAttributeDataArrayForAllPoints(r,n,c,d,h);const l=new s(e.HEAPF32.buffer,h,a).slice();return e._free(h),{name:o,array:l,itemSize:i}}onmessage=function(o){const s=o.data;switch(s.type){case"init":e=s.decoderConfig,t=new Promise((function(t){e.onModuleLoaded=function(e){t({draco:e})},DracoDecoderModule(e)}));break;case"decode":const o=s.buffer,n=s.taskConfig;t.then((e=>{const t=e.draco,i=new t.Decoder;try{const e=function(e,t,o,s){const n=s.attributeIDs,i=s.attributeTypes;let a,d;const c=t.GetEncodedGeometryType(o);if(c===e.TRIANGULAR_MESH)a=new e.Mesh,d=t.DecodeArrayToMesh(o,o.byteLength,a);else{if(c!==e.POINT_CLOUD)throw new Error("THREE.DRACOLoader: Unexpected geometry type.");a=new e.PointCloud,d=t.DecodeArrayToPointCloud(o,o.byteLength,a)}if(!d.ok()||0===a.ptr)throw new Error("THREE.DRACOLoader: Decoding failed: "+d.error_msg());const h={index:null,attributes:[]};for(const o in n){const d=self[i[o]];let c,l;if(s.useUniqueIDs)l=n[o],c=t.GetAttributeByUniqueId(a,l);else{if(l=t.GetAttributeId(a,e[n[o]]),-1===l)continue;c=t.GetAttribute(a,l)}const u=r(e,t,a,o,d,c);"color"===o&&(u.vertexColorSpace=s.vertexColorSpace),h.attributes.push(u)}c===e.TRIANGULAR_MESH&&(h.index=function(e,t,r){const o=r.num_faces(),s=3*o,n=4*s,i=e._malloc(n);t.GetTrianglesUInt32Array(r,n,i);const a=new Uint32Array(e.HEAPF32.buffer,i,s).slice();return e._free(i),{array:a,itemSize:1}}(e,t,a));return e.destroy(a),h}(t,i,new Int8Array(o),n),a=e.attributes.map((e=>e.array.buffer));e.index&&a.push(e.index.array.buffer),self.postMessage({type:"decode",id:s.id,geometry:e},a)}catch(e){console.error(e),self.postMessage({type:"error",id:s.id,error:e.message})}finally{t.destroy(i)}}))}}}}}]);